import org.apache.tools.ant.Project
import org.apache.tools.ant.ProjectHelper

def xmlFilePath='build_input_output.xml'
def propertyMap=[keyA: 'valueA']
def writePropMap=[keyB: 'valueB']
def inputFileList =new ArrayList()
def outputFileList =new ArrayList()
def resolvedInputFileList =new ArrayList()
def resolvedOutputFileList =new ArrayList()
def targetList=new ArrayList()

ant.importBuild('/build.xml'){ target -> 'second_ant_run-' + target }

task readProperty() {
    def antProject = new Project()
    ProjectHelper.configureProject(antProject, file(xmlFilePath))
    propertyMap = antProject.getProperties()
    propertyMap.each { keyA, valueA -> writePropMap.put("\${" + "$keyA" + "}", "$valueA") }
    //writePropMap.each { keyB, valueB -> println "$keyB --> $valueB" }
}

task parseXml(dependsOn: 'readProperty') {
    def parsedProjectXml = new XmlSlurper().parse(xmlFilePath)
    parsedProjectXml.depthFirst().findAll{
        if(it.name()=='target'){
            targetList.add(it.@name)
        }
    }
    targetList.each {targeName->
        def tempInputList=new ArrayList()
        def tempOutputList=new ArrayList()
        parsedProjectXml.depthFirst().find{
            if(it.name()=='target'&& it.@name==targeName){
                println "Ant Target ----> "+ targeName
                it.input.file.each{
                    filepath->
                        def inPath=filepath.@path
                        if(inPath.toString().contains("\$")){
                            def toResolveString = inPath.toString().split("/").getAt(0)
                            def resolvedPath = inPath.toString().replace(toResolveString, writePropMap.get(toResolveString))
                            tempInputList.add(resolvedPath)
                        }
                }
                println "**********Input*****************"
                tempInputList.each {
                    println it.toString()
                }
                it.output.file.each{
                    filepath->
                        def outPath=filepath.@path
                        if(outPath.toString().contains("\$")){
                            def toResolveString = outPath.toString().split("/").getAt(0)
                            def resolvedPath = outPath.toString().replace(toResolveString, writePropMap.get(toResolveString))
                            tempOutputList.add(resolvedPath)
                        }
                }
                println "**********Output****************"
                tempOutputList.each {
                    println it.toString()
                }
                tasks['second_ant_run-'+targeName+''].inputs.files(tempInputList)
                tasks['second_ant_run-'+targeName+''].outputs.files(tempOutputList)
            }
        }
    }
}

task iets3CoreBuildTask {
    dependsOn parseXml
    dependsOn 'second_ant_run-clean'
    dependsOn 'second_ant_run-generate'
    dependsOn 'second_ant_run-assemble'
    tasks.findByName('second_ant_run-generate').mustRunAfter 'second_ant_run-clean'
    tasks.findByName('second_ant_run-assemble').mustRunAfter 'second_ant_run-generate'
}